# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# usage sample:
# - bundle exec fastlane release sdk_dryrun:true module:Core=0.2.1,Banner=0.2.2,OMAdapter=1.0.7 sdk_skip_build:true
# - bundle exec fastlane release

default_platform(:ios)

platform :ios do

  @sdk_map = {
    sdk_env: "prod", # "dev", "prod"
    sdk_configuration: "Release", # "Debug", "Release"
    sdk_dryrun: false,
    sdk_skip_build: false,
    # sdk_module_current: nil,
    # sdk_release_version: nil,
    # sdk_xcodeproj_path: nil,
    # sdk_output_dir: nil,
  }
  p @sdk_map

  @sdk_module_names = ["Core", "Banner", "OMAdapter", "A2A", "MediationAdapter"]

  def set_env param
    if param.count > 0
      @sdk_map.merge!(param)
      p "merged SDK MAP: #{@sdk_map}"
    end

    if !@sdk_map[:sdk_module_current]
      p "Not found parameter :sdk_module_current. Pick one from #{@sdk_module_names} !"
      exit!
    end

    if !@sdk_map[:sdk_xcodeproj_path] 
      @sdk_map[:sdk_xcodeproj_path] = "#{@sdk_map[:sdk_module_current]}/#{@sdk_map[:sdk_module_current]}.xcodeproj"
    end

    version_in_plist = get_version_number(
      target: @sdk_map[:sdk_module_current],
      xcodeproj: @sdk_map[:sdk_xcodeproj_path]
    )
    if @sdk_map[:sdk_release_version] != version_in_plist
      p "incorrect release version to plist #{@sdk_map[:sdk_release_version]} != #{version_in_plist}!"
      exit!
    end

    @sdk_map[:sdk_output_dir] = "build/#{@sdk_map[:sdk_configuration]}"

    p "sdk map: #{@sdk_map}"
  end

  lane :package do |param|
    set_env param
    p "xcodebuild #{@sdk_map[:sdk_xcodeproj_path]} for #{@sdk_map[:sdk_configuration]} into #{@sdk_map[:sdk_output_dir]}"

    if @sdk_map[:sdk_skip_build]
      p "skip build #{@sdk_map[:sdk_module_current]}"
      next
    end

    xcodebuild(
      raw_buildlog: true,
      project: @sdk_map[:sdk_xcodeproj_path],
      target: "Aggregate",
      configuration: @sdk_map[:sdk_configuration],
      build_settings: { 
        :SDK_OUTPUT_DIR => @sdk_map[:sdk_output_dir],
        :SDK_VERSION_STRING => @sdk_map[:sdk_release_version],
      },
    )
  end

  lane :deploy_to_gcs_dev do |param|
    set_env param

    project = "rd2n-dev"
    bucket = "rssp-dev-cdn"
    source_file = "../#{@sdk_map[:sdk_module_current]}/#{@sdk_map[:sdk_output_dir]}/#{param[:file_name]}"
    target_file = "gs://#{bucket}/sdk/ios/#{@sdk_map[:sdk_env]}/RUNA#{@sdk_map[:sdk_module_current]}/#{param[:file_name]}"
    
    puts("cp #{source_file} #{target_file}")
    if @sdk_map[:sdk_dryrun]
      next
    end

    system("gsutil cp #{source_file} #{target_file}")
  end

  lane :deploy_to_gcs do |param|
      p "TODO"
  end

  lane :update_podspec do |param|
    set_env param

    path = "release/cocoapods/RUNA#{@sdk_map[:sdk_module_current]}.podspec"

    puts("publish #{path} #{@sdk_map[:sdk_release_version]}")
    if @sdk_map[:sdk_dryrun]
      next
    end

    # system("pod repo push Rakuten-Ads-iOS #{path} --skip-tests --verbose --sources=Rakuten-Ads-iOS")

    pod_push(
      path: path,
      repo: 'Rakuten-Ads-iOS',
      skip_tests: false,
      verbose: true,
      skip_import_validation: false,
      sources: 'Rakuten-Ads-iOS',
    )
  end

  lane :update_carthage do |param|
    p "TODO update_carthage"
  end

  lane :github_release_tag do |param|
    path = "release/cocoapods/RUNA.podspec"
    version = version_get_podspec(path: path)

    p "push release tag #{version}"
    if @sdk_map[:sdk_dryrun]
      next
    end

    pod_push(
      path: path,
      repo: 'Rakuten-Ads-iOS',
      skip_tests: false,
      verbose: true,
      skip_import_validation: false,
      sources: 'Rakuten-Ads-iOS',
      # sources: "#{ENV['HOME']}/.cocoapods/repos/Rakuten-Ads-iOS",
    )

    # set_github_release(
    #   repository_name: "rakuten-ads/Rakuten-Ads-iOS",
    #   api_token: ENV["FASTLANE_GITHUB_TOKEN"],
    #   name: version,
    #   tag_name: version,
    #   description: "release for #{version}",
    # )
  end

  lane :release do |param|
    if param[:module]
      modules = param[:module].split(",")
    end

    modules.each do |aModule|
      @sdk_map = {
        sdk_env: "prod",
        sdk_configuration: "Release",
        sdk_dryrun: false,
        sdk_skip_build: false,
        # sdk_module_current: nil,
        # sdk_release_version: nil,
        # sdk_xcodeproj_path: nil,
        # sdk_output_dir: nil,
      }
      @sdk_map[:sdk_module_current] = aModule.split("=")[0]
      @sdk_map[:sdk_release_version] = aModule.split("=")[1]

      set_env param
      package
      deploy_to_gcs_dev file_name: "RUNA#{@sdk_map[:sdk_module_current]}_iOS_#{@sdk_map[:sdk_release_version]}.xcframework.zip"
      deploy_to_gcs_dev file_name: "RUNA#{@sdk_map[:sdk_module_current]}_iOS_#{@sdk_map[:sdk_release_version]}+dsym.zip"
      update_spm_commit
      update_carthage
      update_podspec
      update_spm
    end

    github_release_tag

  end

  lane :update_spm do |param|
    set_env param

    _fileName = "RUNA#{@sdk_map[:sdk_module_current]}_iOS_#{@sdk_map[:sdk_release_version]}.xcframework.zip"
    _source_file = "../#{@sdk_map[:sdk_module_current]}/#{@sdk_map[:sdk_output_dir]}/#{_fileName}"
    _spm_dir = "../release"
    _spm_file = "#{_spm_dir}/Package.swift"
    _spm_file_tmp = "#{_spm_file}.tmp" 
    p "update_spm #{_spm_file} for [#{_source_file}]"

    _checksum = `cd #{_spm_dir}; swift package compute-checksum #{_source_file}`
    _checksum = _checksum.strip
    if !_checksum 
      exit!
    end

    if File.exist?(_spm_file_tmp) 
      File.delete(_spm_file_tmp)
    end
    
    File.rename(_spm_file, _spm_file_tmp)
    File.open(_spm_file, "w") do |f|
      p "create new file #{_spm_file}"
      File.open(_spm_file_tmp, "r") do |bkf|
        p "open backup file #{_spm_file_tmp}"
        _skipLine = 0
        bkf.each do |line|
          if _skipLine > 0
            _skipLine -= 1
            if _skipLine == 0 && line.include?("checksum")
              # target line to update checksum
              p "replace checksum"
              f.puts "\t\t\tchecksum : \"#{_checksum}\""
              next
            end
          end
          
          if line.include?("name: \"RUNA#{@sdk_map[:sdk_module_current]}\",") # name: "RUNACore",
            p "find target - [name: \"RUNA#{@sdk_map[:sdk_module_current]}\",]"
            _skipLine = 2
          end
          f.print line
        end
      end
    end

    FileUtils.cp _spm_file, "#{ENV['HOME']}/.cocoapods/repos/Rakuten-Ads-iOS"

  end

  lane :stripInfoPlist do |param|
    _module = param[:module]
    _module.slice!(0..3)
    _file = "#{_module}/Carthage/Build/RUNA#{_module}.xcframework/Info.plist"
    puts("strip InfoPlist: #{_file}")

    update_plist( # delete dsym & symbol info
      plist_path: _file,
      block: proc do |plist|
        plist["AvailableLibraries"].each do |lib_dict|
          lib_dict.delete("DebugSymbolsPath")
          lib_dict.delete("BitcodeSymbolMapsPath")
        end
      end
    )
  end


  lane :update_spm_commit do
    _spm_repo_dir = "#{ENV['HOME']}/.cocoapods/repos/Rakuten-Ads-iOS"
  
    # Check if there are any changes in the repo
    changes = `cd #{_spm_repo_dir}; git diff`
    if changes.empty?
      p "No changes in #{_spm_repo_dir}"
    else
      p "Changes detected in ---- #{_spm_repo_dir}:"
      puts changes
  
      # Commit the changes if there are any
      add_result = `cd #{_spm_repo_dir}; git add .`
      if $?.exitstatus != 0
        p "Error adding changes: #{add_result}"
      else
        commit_result = `cd #{_spm_repo_dir}; git commit -m "Update release 1.16.0"`
        if $?.exitstatus != 0
          p "Error committing changes: #{commit_result}"
        end  # This end might be missing
      end  # This end might be missing
    end  # This end might be missing
  end  # This end might be missing
end

